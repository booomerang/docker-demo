#!/usr/bin/env groovy

def commit_id

pipeline {
    agent any
    environment {
        IMAGE_NAME = "alexanderduply/nodejs-docker-example"
        DOCKERHUB_CREDENTIALS = credentials('dockerhub')
    }
    stages {
        stage('preparation') {
            steps {
                script {
                  checkout scm
                  sh "git rev-parse --short HEAD > .git/commit-id"
                  commit_id = readFile('.git/commit-id').trim()
                }
            }
        }
        stage('test') {
            steps {
                script {
                    echo "Testing the application..."
                    echo "${commit_id}"
                    echo "${env.IMAGE_NAME}"
                    // def myTestContainer = docker.image('node:4.6')
                    // myTestContainer.pull()
                    // myTestContainer.inside {
                    //   sh 'npm install --only=dev'
                    //   sh 'npm test'
                    // }
                }
            }
        }
        stage('test with a DB') {
            steps {
                script {
                    echo "Testing the application with DB..."
                    // def mysql = docker.image('mysql').run("-e MYSQL_ALLOW_EMPTY_PASSWORD=yes") 
                    // def myTestContainer = docker.image('node:4.6')
                    // myTestContainer.pull()
                    // myTestContainer.inside("--link ${mysql.id}:mysql") { // using linking, mysql will be available at host: mysql, port: 3306
                    //       sh 'npm install --only=dev' 
                    //       sh 'npm test'                     
                    // }                                   
                    // mysql.stop()
                }
            }
        }
        stage('build') {
            steps {
                script {
                  echo 'Building docker image...'

                  commit_id = 'latest'
                  def imageName = env.IMAGE_NAME + ':' + commit_id
                  sh "docker build -t ${imageName} ."
                  sh 'echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin'
                  sh "docker push ${imageName}"
                   //buildImage(env.IMAGE_NAME + commit_id)
                   //dockerLogin()
                   //dockerPush(env.IMAGE_NAME)
                }
            }
        }
        stage('deploy') {
            steps {
                script {
                    echo "Deploying the application ..."

                    // def dockerCommand = 'docker run -d -p 3080:3080 alexanderduply/react-nodejs-example:1.0'
                    def ec2Instance = "ec2-user@3.120.130.240"
                    def dockerCommand = 'docker-compose up -d'
                    sshagent(['ec2-server-key']) {
                      sh "scp -o StrictHostKeyChecking=no docker-compose.yaml ${ec2Instance}:/home/ec2-user"
                      sh "ssh -o StrictHostKeyChecking=no ${ec2Instance} ${dockerCommand}"
                    }
                }
            }
        }
    }
}